// Color Palette
/*
const vec3 PALETTE[8] = vec3[](
    vec3(13.0, 43.0, 69.0) / 255.0,
    vec3(32.0, 60.0, 86.0) / 255.0,
    vec3(84.0, 78.0, 104.0) / 255.0,
    vec3(141.0, 105.0, 122.0) / 255.0,
    vec3(208.0, 129.0, 89.0) / 255.0,
    vec3(255.0, 170.0, 94.0) / 255.0,
    vec3(255.0, 212.0, 163.0) / 255.0,
    vec3(255.0, 236.0, 214.0) / 255.0
);*/

/*

const vec3 PALETTE[24] = vec3[](

    vec3(13.0, 43.0, 69.0) / 255.0,
    vec3(32.0, 60.0, 86.0) / 255.0,
    vec3(84.0, 78.0, 104.0) / 255.0,
    vec3(141.0, 105.0, 122.0) / 255.0,
    vec3(208.0, 129.0, 89.0) / 255.0,
    vec3(255.0, 170.0, 94.0) / 255.0,
    vec3(255.0, 212.0, 163.0) / 255.0,
    vec3(255.0, 236.0, 214.0) / 255.0,

    vec3(26.0, 28.0, 44.0) / 255.0,
    vec3(93.0, 39.0, 93.0) / 255.0,
    vec3(177.0, 62.0, 83.0) / 255.0,
    vec3(239.0, 125.0, 87.0) / 255.0,
    vec3(255.0, 205.0, 117.0) / 255.0,
    vec3(167.0, 240.0, 112.0) / 255.0,
    vec3(56.0, 183.0, 100.0) / 255.0,
    vec3(37.0, 113.0, 121.0) / 255.0,
    vec3(41.0, 54.0, 111.0) / 255.0,
    vec3(59.0, 93.0, 201.0) / 255.0,
    vec3(65.0, 166.0, 246.0) / 255.0,
    vec3(115.0, 239.0, 247.0) / 255.0,
    vec3(244.0, 244.0, 244.0) / 255.0,
    vec3(148.0, 176.0, 194.0) / 255.0,
    vec3(86.0, 108.0, 134.0) / 255.0,
    vec3(51.0, 60.0, 87.0) / 255.0
);
*/

/*
const vec3 PALETTE[24] = vec3[](
    vec3(26.0, 28.0, 44.0) / 255.0,
    vec3(13.0, 43.0, 69.0) / 255.0,
    vec3(93.0, 39.0, 93.0) / 255.0,
    vec3(41.0, 54.0, 111.0) / 255.0,
    vec3(32.0, 60.0, 86.0) / 255.0,
    vec3(51.0, 60.0, 87.0) / 255.0,
    vec3(84.0, 78.0, 104.0) / 255.0,
    vec3(177.0, 62.0, 83.0) / 255.0,
    vec3(59.0, 93.0, 201.0) / 255.0,
    vec3(37.0, 113.0, 121.0) / 255.0,
    vec3(86.0, 108.0, 134.0) / 255.0,
    vec3(141.0, 105.0, 122.0) / 255.0,
    vec3(208.0, 129.0, 89.0) / 255.0,
    vec3(239.0, 125.0, 87.0) / 255.0,
    vec3(56.0, 183.0, 100.0) / 255.0,
    vec3(65.0, 166.0, 246.0) / 255.0,
    vec3(148.0, 176.0, 194.0) / 255.0,
    vec3(255.0, 170.0, 94.0) / 255.0,
    vec3(255.0, 205.0, 117.0) / 255.0,
    vec3(115.0, 239.0, 247.0) / 255.0,
    vec3(167.0, 240.0, 112.0) / 255.0,
    vec3(255.0, 212.0, 163.0) / 255.0,
    vec3(255.0, 236.0, 214.0) / 255.0,
    vec3(244.0, 244.0, 244.0) / 255.0
);*/

const vec3 PALETTE[8] = vec3[](
    vec3(13.0, 43.0, 69.0) / 255.0,
    vec3(32.0, 60.0, 86.0) / 255.0,
    vec3(84.0, 78.0, 104.0) / 255.0,
    vec3(141.0, 105.0, 122.0) / 255.0,
    vec3(208.0, 129.0, 89.0) / 255.0,
    vec3(255.0, 170.0, 94.0) / 255.0,
    vec3(255.0, 212.0, 163.0) / 255.0,
    vec3(255.0, 236.0, 214.0) / 255.0
);

vec3 closest_color = PALETTE[0];
float min_distance = distance(color_in.rgb, PALETTE[0]);

// Compare input color with each color in the palette to find the closest match
for (int i = 1; i < 8; i++) {
    float dist = distance(color_in.rgb, PALETTE[i]);
    if (dist < min_distance) {
        min_distance = dist;
        closest_color = PALETTE[i];
    }
}

color_out = closest_color;
