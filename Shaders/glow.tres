[gd_resource type="VisualShader" load_steps=6 format=3 uid="uid://cid7m6o0n5ort"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_2deie"]
constant = 1.0

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_jf6dk"]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_rycy1"]
output_port_for_preview = 0
source = 1

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_28jdy"]
size = Vector2(618, 521)
expression = "
const vec3 PALETTE[8] = vec3[](
    vec3(13.0, 43.0, 69.0) / 255.0,
    vec3(32.0, 60.0, 86.0) / 255.0,
    vec3(84.0, 78.0, 104.0) / 255.0,
    vec3(141.0, 105.0, 122.0) / 255.0,
    vec3(208.0, 129.0, 89.0) / 255.0,
    vec3(255.0, 170.0, 94.0) / 255.0,
    vec3(255.0, 212.0, 163.0) / 255.0,
    vec3(255.0, 236.0, 214.0) / 255.0
);

vec3 closest_color = PALETTE[0];
float min_distance = distance(color_in.rgb, PALETTE[0]);

// Compare input color with each color in the palette to find the closest match
for (int i = 1; i < 8; i++) {
    float dist = distance(color_in.rgb, PALETTE[i]);
    if (dist < min_distance) {
        min_distance = dist;
        closest_color = PALETTE[i];
    }
}

color_out = closest_color;"

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_lt7e6"]
output_port_for_preview = 0
expanded_output_ports = [0]
constant = Color(0.988235, 0.988235, 0.988235, 0)

[resource]
code = "shader_type canvas_item;
render_mode blend_mix, unshaded;

uniform sampler2D screen_tex_frg_6 : hint_screen_texture;



void fragment() {
// Input:5
	vec2 n_out5p0 = SCREEN_UV;


	vec4 n_out6p0;
// Texture2D:6
	n_out6p0 = texture(screen_tex_frg_6, n_out5p0);


	vec3 n_out7p0;
// Expression:7
	n_out7p0 = vec3(0.0, 0.0, 0.0);
	{
		
		const vec3 PALETTE[8] = vec3[](
		    vec3(13.0, 43.0, 69.0) / 255.0,
		    vec3(32.0, 60.0, 86.0) / 255.0,
		    vec3(84.0, 78.0, 104.0) / 255.0,
		    vec3(141.0, 105.0, 122.0) / 255.0,
		    vec3(208.0, 129.0, 89.0) / 255.0,
		    vec3(255.0, 170.0, 94.0) / 255.0,
		    vec3(255.0, 212.0, 163.0) / 255.0,
		    vec3(255.0, 236.0, 214.0) / 255.0
		);
		
		vec3 closest_color = PALETTE[0];
		float min_distance = distance(vec3(n_out6p0.xyz).rgb, PALETTE[0]);
		
		// Compare input color with each color in the palette to find the closest match
		for (int i = 1; i < 8; i++) {
		    float dist = distance(vec3(n_out6p0.xyz).rgb, PALETTE[i]);
		    if (dist < min_distance) {
		        min_distance = dist;
		        closest_color = PALETTE[i];
		    }
		}
		
		n_out7p0 = closest_color;
	}


// FloatConstant:4
	float n_out4p0 = 1.000000;


// Output:0
	COLOR.rgb = n_out7p0;
	COLOR.a = n_out4p0;


}

void light() {
// ColorConstant:2
	vec4 n_out2p0 = vec4(0.988235, 0.988235, 0.988235, 0.000000);
	float n_out2p4 = n_out2p0.a;


// Output:0
	LIGHT.rgb = vec3(n_out2p0.xyz);
	LIGHT.a = n_out2p4;


}
"
mode = 1
flags/unshaded = true
flags/light_only = false
nodes/fragment/4/node = SubResource("VisualShaderNodeFloatConstant_2deie")
nodes/fragment/4/position = Vector2(180, 400)
nodes/fragment/5/node = SubResource("VisualShaderNodeInput_jf6dk")
nodes/fragment/5/position = Vector2(-820, 300)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_rycy1")
nodes/fragment/6/position = Vector2(-440, 300)
nodes/fragment/7/node = SubResource("VisualShaderNodeExpression_28jdy")
nodes/fragment/7/position = Vector2(-180, 500)
nodes/fragment/7/size = Vector2(618, 521)
nodes/fragment/7/input_ports = "0,4,color_in;"
nodes/fragment/7/output_ports = "0,4,color_out;"
nodes/fragment/7/expression = "
const vec3 PALETTE[8] = vec3[](
    vec3(13.0, 43.0, 69.0) / 255.0,
    vec3(32.0, 60.0, 86.0) / 255.0,
    vec3(84.0, 78.0, 104.0) / 255.0,
    vec3(141.0, 105.0, 122.0) / 255.0,
    vec3(208.0, 129.0, 89.0) / 255.0,
    vec3(255.0, 170.0, 94.0) / 255.0,
    vec3(255.0, 212.0, 163.0) / 255.0,
    vec3(255.0, 236.0, 214.0) / 255.0
);

vec3 closest_color = PALETTE[0];
float min_distance = distance(color_in.rgb, PALETTE[0]);

// Compare input color with each color in the palette to find the closest match
for (int i = 1; i < 8; i++) {
    float dist = distance(color_in.rgb, PALETTE[i]);
    if (dist < min_distance) {
        min_distance = dist;
        closest_color = PALETTE[i];
    }
}

color_out = closest_color;"
nodes/fragment/connections = PackedInt32Array(4, 0, 0, 1, 5, 0, 6, 0, 7, 0, 0, 0, 6, 0, 7, 0)
nodes/light/2/node = SubResource("VisualShaderNodeColorConstant_lt7e6")
nodes/light/2/position = Vector2(120.809, 191.809)
nodes/light/connections = PackedInt32Array(2, 4, 0, 1, 2, 0, 0, 0)
